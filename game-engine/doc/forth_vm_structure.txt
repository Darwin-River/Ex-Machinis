Glossary of Terms:

	VM             - Virtual Machine
	Cell           - The Virtual Machines natural Word Size, on a 32 bit
		       machine the Cell will be 32 bits wide
	Word           - In Forth a Word refers to a function, and not the
		       usual meaning of an integer that is the same size as
		       the machines underlying word size, this can cause confusion
	API            - Application Program Interface
	interpreter    - as in byte code interpreter, synonymous with virtual
		       machine.
	REPL           - Read-Evaluate-Print-Loop, this Forth actually provides
		       something more like a "REL", or Read-Evaluate-Loop (as printing
		       has to be done explicitly), but the interpreter is interactive
		       which is the important point
	RPN            - Reverse Polish Notation (see
		       <https://en.wikipedia.org/wiki/Reverse_Polish_notation>).
		       The Forth interpreter uses RPN to enter expressions.
	The stack      - Forth implementations have at least two stacks, one for
		       storing variables and another for control flow and temporary
		       variables, when the term *stack* is used on its own and with
		       no other context it refers to the *variable stack* and not
		       the *return stack*. This *variable stack* is used for
		       passing parameters into and return values to functions.
	Return stack   - Most programming languages have a call stack, C has one
		       but not one that the programmer can directly access, in
		       Forth manipulating the return stack is often used.
	factor         - factoring is splitting words into smaller words that
		       perform a specific function. To say a word is a natural
		       factor of another word is to say that it makes sense to take
		       some functionality of the word to be factored and to create
		       a new word that encapsulates that functionality. Forth
		       encourages heavy factoring of definitions.
	Command mode   - This mode executes both compiling words and immediate
		       words as they are encountered
	Compile mode   - This mode executes immediate words as they are
		       encountered, but compiling words are compiled into the
		       dictionary.
	Primitive      - A word whose instruction is built into the VM.




The Forth interpreter is a simple loop that does the following:

	Start the interpreter loop <-----------<-----------------<---.
	Get a space delimited word                                    \
	Attempt to look up that word in the dictionary                 \
	Was the word found?                                             ^
	|-Yes:                                                          |
	|   Are we in compile mode?                                     |
	|   |-Yes:                                                      ^
	|   | \-Is the Word an Immediate word?                          |
	|   |   |-Yes:                                                  |
	|   |   | \-Execute the word >--------->----------------->----->.
	|   |   \-No:                                                   |
	|   |     \-Compile the word into the dictionary >------->----->.
	|   \-No:                                                       |
	|     \-Execute the word >------------->----------------->----->.
	\-No:                                                           ^
	  \-Can the word be treated as a number?                        |
	    |-Yes:                                                      |
	    | \-Are we in compile mode?                                 |
	    |   |-Yes:                                                  |
	    |   | \-Compile a literal into the dictionary >------>----->.
	    |   \-No:                                                   |
	    |     \-Push the number to the variable stack >------>----->.
	    \-No:                                                       |
	      \-An Error has occurred, print out an error message >---->.




We can serialize the Forth virtual machine image, saving it to disk so we
can load it again later. When saving the image to disk it is important
to be able to identify the file somehow, and to identify properties of 
the image.

Unfortunately each image is not portable to machines with different
cell sizes (determined by "sizeof(forth_cell_t)") and different endianess,
and it is not trivial to convert them due to implementation details.

**enum header** names all of the different fields in the header.

The first four fields (**MAGIC0**...**MAGIC3**) are magic numbers which identify
the file format, so utilities like *file* on Unix systems can differentiate
binary formats from each other.

**CELL_SIZE** is the size of the virtual machine cell used to create the image.

**VERSION** is used to both represent the version of the Forth interpreter and
the version of the file format.

**ENDIAN** is the endianess of the VM

**MAGIC7** is the last magic number.

When loading the image the magic numbers are checked as well as
compatibility between the saved image and the compiled Forth interpreter. 




The vm memory is laid out as follows, assuming the size of the virtual
machine is 32768 cells big:

	.-----------------------------------------------.
	| 0-3F      | 40-7BFF       |7C00-7DFF|7E00-7FFF|
	.-----------------------------------------------.
	| Registers | Dictionary... | V stack | R stack |
	.-----------------------------------------------.

	V stack = The Variable Stack
	R stack = The Return Stack

The dictionary has its own complex structure, and it always starts just
after the registers. It includes scratch areas for parsing words, start up
code and empty space yet to be consumed before the variable stack. The sizes
of the variable and returns stack change depending on the virtual machine
size. The structures within the dictionary will be described later on.



VM registers

X(NAME, ENUM, VALUE, HELP)

#define XMACRO_REGISTERS \
 X("h",               DIC,            6,   "dictionary pointer")\
 X("r",               RSTK,           7,   "return stack pointer")\
 X("state",           STATE,          8,   "interpreter state")\
 X("base",            BASE,           9,   "base conversion variable")\
 X("pwd",             PWD,            10,  "pointer to previous word")\
 X("`source-id",      SOURCE_ID,      11,  "input source selector")\
 X("`sin",            SIN,            12,  "string input pointer")\
 X("`sidx",           SIDX,           13,  "string input index")\
 X("`slen",           SLEN,           14,  "string input length")\
 X("`start-address",  START_ADDR,     15,  "pointer to start of VM")\
 X("`fin",            FIN,            16,  "file input pointer")\
 X("`fout",           FOUT,           17,  "file output pointer")\
 X("`stdin",          STDIN,          18,  "file pointer to stdin")\
 X("`stdout",         STDOUT,         19,  "file pointer to stdout")\
 X("`stderr",         STDERR,         20,  "file pointer to stderr")\
 X("`argc",           ARGC,           21,  "argument count")\
 X("`argv",           ARGV,           22,  "arguments")\
 X("`debug",          DEBUG,          23,  "turn debugging on/off if enabled")\
 X("`invalid",        INVALID,        24,  "non-zero on serious error")\
 X("`top",            TOP,            25,  "*stored* version of top of stack")\
 X("`instruction",    INSTRUCTION,    26,  "start up instruction")\
 X("`stack-size",     STACK_SIZE,     27,  "size of the stacks")\
 X("`error-handler",  ERROR_HANDLER,  28,  "actions to take on error")\
 X("`handler",        THROW_HANDLER,  29,  "exception handler is stored here")\
 X("`signal",         SIGNAL_HANDLER, 30,  "signal handler")\
 X("`x",              SCRATCH_X,      31,  "scratch variable x")


 Built-in instructions 


 #define XMACRO_INSTRUCTIONS\
 X(0, PUSH,      "push",      " -- u : push a literal")\
 X(0, CONST,     "const",     " -- u : push a literal")\
 X(0, RUN,       "run",       " -- : run a Forth word")\
 X(0, DEFINE,    "define",    " -- : make new Forth word, set compile mode")\
 X(0, IMMEDIATE, "immediate", " -- : make a Forth word immediate")\
 X(0, READ,      "read",      " c\" xxx\" -- : read Forth word, execute it")\
 X(1, LOAD,      "@",         "addr -- u : load a value")\
 X(2, STORE,     "!",         "u addr -- : store a value")\
 X(1, CLOAD,     "c@",        "c-addr -- u : load character value")\
 X(2, CSTORE,    "c!",        "u c-addr -- : store character value")\
 X(2, SUB,       "-",         "u1 u2 -- u3 : subtract u2 from u1 yielding u3")\
 X(2, ADD,       "+",         "u u -- u : add two values")\
 X(2, AND,       "and",       "u u -- u : bitwise and of two values")\
 X(2, OR,        "or",        "u u -- u : bitwise or of two values")\
 X(2, XOR,       "xor",       "u u -- u : bitwise exclusive or of two values")\
 X(1, INV,       "invert",    "u -- u : invert bits of value")\
 X(2, SHL,       "lshift",    "u1 u2 -- u3 : left shift u1 by u2")\
 X(2, SHR,       "rshift",    "u1 u2 -- u3 : right shift u1 by u2")\
 X(2, MUL,       "*",         "u u -- u : multiply to values")\
 X(2, DIV,       "/",         "u1 u2 -- u3 : divide u1 by u2 yielding u3")\
 X(2, ULESS,     "u<",        "u u -- bool : unsigned less than")\
 X(2, UMORE,     "u>",        "u u -- bool : unsigned greater than")\
 X(0, EXIT,      "exit",      " -- : return from a word definition")\
 X(0, KEY,       "key",       " -- char : get one character of input")\
 X(1, EMIT,      "_emit",     " char -- status : get one character of input")\
 X(0, FROMR,     "r>",        " -- u, R: u -- : move from return stack")\
 X(1, TOR,       ">r",        "u --, R: -- u : move to return stack")\
 X(0, BRANCH,    "branch",    " -- : unconditional branch")\
 X(1, QBRANCH,   "?branch",   "u -- : branch if u is zero")\
 X(1, PNUM,      "(.)",       "u -- n : print a number returning an error on failure")\
 X(1, COMMA,     ",",         "u -- : write a value into the dictionary")\
 X(2, EQUAL,     "=",         "u u -- bool : compare two values for equality")\
 X(2, SWAP,      "swap",      "x1 x2 -- x2 x1 : swap two values")\
 X(1, DUP,       "dup",       "u -- u u : duplicate a value")\
 X(1, DROP,      "drop",      "u -- : drop a value")\
 X(2, OVER,      "over",      "x1 x2 -- x1 x2 x1 : copy over a value")\
 X(0, TAIL,      "tail",      " -- : tail recursion")\
 X(0, FIND,      "find",      "c\" xxx\" -- addr | 0 : find a Forth word")\
 X(0, DEPTH,     "depth",     " -- u : get current stack depth")\
 X(0, SPLOAD,    "sp@",       " -- addr : load current stack pointer ")\
 X(0, SPSTORE,   "sp!",       " addr -- : modify the stack pointer")\
 X(0, CLOCK,     "clock",     " -- u : push a time value")\
 X(3, EVALUATOR, "evaluator", "c-addr u 0 | file-id 0 1 -- u : evaluate file/str")\
 X(0, PSTK,      ".s",        " -- : print out values on the stack")\
 X(1, RESTART,   "restart",   " error -- : restart system, cause error")\
 X(0, CALL,      "call",      "n1...nn c -- n1...nn c : call a function")\
 X(2, SYSTEM,    "system",    "c-addr u -- bool : execute system command")\
 X(1, FCLOSE,    "close-file", "file-id -- ior : close a file")\
 X(3, FOPEN,     "open-file",  "c-addr u fam -- open a file")\
 X(2, FDELETE,   "delete-file",     "c-addr u -- ior : delete a file")\
 X(3, FREAD,     "read-file",       "c-addr u file-id -- u ior : write block")\
 X(3, FWRITE,    "write-file",      "c-addr u file-id -- u ior : read block")\
 X(1, FPOS,      "file-position",   "file-id -- u : get the file position")\
 X(2, FSEEK,     "reposition-file", "file-id u -- ior : reposition file")\
 X(1, FFLUSH,    "flush-file",      "file-id -- ior : flush a file")\
 X(4, FRENAME,   "rename-file",     "c-addr1 u1 c-addr2 u2 -- ior : rename file")\
 X(0, TMPFILE,   "temporary-file",  "-- file-id ior : open a temporary file")\
 X(1, RAISE,     "raise",           "signal -- bool : raise a signal")\
 X(0, DATE,      "date",          " -- date : push the time")\
 X(3, MEMMOVE,   "memory-copy",   " r-addr1 r-addr2 u -- : move a block of memory from r-addr2 to r-addr1")\
 X(3, MEMCHR,    "memory-locate", " r-addr char u -- r-addr | 0 : locate a character memory")\
 X(3, MEMSET,    "memory-set",    " r-addr char u -- : set a block of memory")\
 X(3, MEMCMP,    "memory-compare", " r-addr1 r-addr2 u -- u : compare two blocks of memory")\
 X(1, ALLOCATE,  "allocate",       " u -- r-addr ior : allocate a block of memory")\
 X(1, FREE,      "free",           " r-addr1 -- ior : free a block of memory")\
 X(2, RESIZE,    "resize",         " r-addr u -- r-addr ior : resize a block of memory")\
 X(2, GETENV,    "getenv",         " c-addr u -- r-addr u : return an environment variable")\
 X(0, LAST_INSTRUCTION, NULL, "")



Built-in constants


#define X_MACRO_CONSTANTS\
 X("dictionary-start",  DICTIONARY_START, "start of dictionary")\
 X("r/o",     FAM_RO, "read only file access method")\
 X("r/w",     FAM_RW, "read/write file access method")\
 X("w/o",     FAM_WO, "write only file access method")\
 X("size",    sizeof(forth_cell_t), "size of forth cell in bytes")\
 X("#tib",    MAXIMUM_WORD_LENGTH * sizeof(forth_cell_t), "")\
 X("tib",     STRING_OFFSET * sizeof(forth_cell_t), "")\
 X("SIGABRT", -SIGABRT+BIAS_SIGNAL, "SIGABRT value")\
 X("SIGFPE",  -SIGFPE +BIAS_SIGNAL, "SIGFPE value")\
 X("SIGILL",  -SIGILL +BIAS_SIGNAL, "SIGILL value")\
 X("SIGINT",  -SIGINT +BIAS_SIGNAL, "SIGINT value")\
 X("SIGSEGV", -SIGSEGV+BIAS_SIGNAL, "SIGSEGV value")\
 X("SIGTERM", -SIGTERM+BIAS_SIGNAL, "SIGTERM value")\
 X("bias-signal", BIAS_SIGNAL,  "bias added to signals")\
 X("bias-errno",  BIAS_ERRNO,   "bias added to errnos")\
 X("instruction-mask", INSTRUCTION_MASK, "instruction mask for CODE field")\
 X("word-mask",   WORD_MASK,    "word length mask for CODE field")\
 X("hidden-bit",  WORD_HIDDEN_BIT_OFFSET, "hide bit in CODE field")\
 X("hidden-mask", 1u << WORD_HIDDEN_BIT_OFFSET, "hide mask for CODE ")\
 X("compile-bit", COMPILING_BIT_OFFSET, "compile/immediate bit in CODE field")\
 X("dolist",      RUN,          "instruction for executing a words body")\
 X("dolit",       2,            "location of fake word for pushing numbers")\
 X("doconst",     CONST,        "instruction for pushing a constant")\
 X("bl",          ' ',          "space character")\
 X("')'",         ')',          "')' character")\
 X("cell",        1,            "space a single cell takes up")



 Dictionary structure


 In all Forth implementations there exists a concept of *the dictionary*,
although they may be implemented in different ways the usual way is as a
linked list of words, starting with the latest defined word and ending with
a special terminating value. Words cannot be arbitrarily deleted, deletions
have to occur in the reverse order that they are defined.

Each word or Forth function that has been defined can be looked up in this 
dictionary, and dependent on whether it is an immediate word or a compiling 
word, and whether we are in command or compile mode different actions are 
taken when we have found the word we are looking for in our Read-Evaluate-Loop.

	    | <-- Start of VM memory
	    |             | <-- Start of dictionary
	    |             |
	.------------.    |  .------.      .------.             .-------------.
	| Terminator | <---- | Word | <--- | Word | < -- ... -- | Latest Word |
	.------------.    |  .------.      .------.             .-------------.
	    |                                                     ^
	    |                                                     |
	    |                                                   PWD Register

The **PWD** registers points to the latest defined word, a search starts from
here and works it way backwards (allowing us replace old definitions by
appending new ones with the same name), the terminator 'value' is actually any
value that points before the beginning of the dictionary.

Our word header looks like this:

	.-----------.-----.------.------------.
	| Word Name | PWD | CODE | Data Field |
	.-----------.-----.------.------------.

* The **Data Field** is optional and is of variable length.
* **Word Name** is a variable length field whose size is recorded in the
CODE field.

And the **CODE** field is a composite field, to save space, containing a virtual
machine instruction, the hidden bit, the compiling bit, and the length of 
the Word  Name string as an offset in cells from **PWD** field. 

The field looks like this:


	.---------------.------------------.------------.-------------.
	|      15       | 14 ........... 8 |    9       | 7 ....... 0 |
	| Compiling Bit |  Word Name Size  | Hidden Bit | Instruction |
	.---------------.------------------.------------.-------------.

The maximum value for the Word Name field is determined by the width of
the Word Name Size field.

The hidden bit is not used in the **compile** function, but is used
elsewhere (in **forth_find**) to hide a word definition from the word
search. The hidden bit is not set within this program at all, however it
can be set by a running Forth virtual machine (and it is, if desired).

The compiling bit tells the text interpreter/compiler what to do with the
word when it is read in from the input, if set it will be compiled into
the dictionary if in compile mode and in command mode it will be executed,
if it is cleared the word will always be executed. 

The instruction is the virtual machine instruction that is to be executed



We need enough memory to store the registers
(32 cells), the parse area for a word (**MAXIMUM_WORD_LENGTH** cells), the 
initial start up program (about 6 cells), the initial built in and defined 
word set (about 600-700 cells) and the variable and return stacks 
(**MINIMUM_STACK_SIZE** cells each, as minimum)
If we add these together we come up with an absolute minimum, although
that would not allow us define new words or do anything useful. We use
**MINIMUM_STACK_SIZE** to define a useful minimum, albeit a restricted on, it
is not a minimum large enough to store all the definitions in *forth.fth*
(a file within the project containing a lot of Forth code) but it is large
enough for embedded systems, for testing the interpreter and for the unit
tests within the *unit.c* file.



The following section will explain how the threaded virtual machine interpreter
works. Threaded code is a simple concept and Forths typically compile
their code to threaded code, it suites Forth implementations as word
definitions consist of juxtaposition of previously defined words until they
reach a set of primitives.

This means a function like **square** will be implemented like this:

	call dup   <- duplicate the top item on the variable stack
	call *     <- push the result of multiplying the top two items
	call exit  <- exit the definition of square

Each word definition is like this, a series of calls to other functions. We
can optimize this by removing the explicit **call** and just having a series
of code address to jump to, which will become:

	address of "dup"
	address of "*"
	address of "exit"

We now have the problem that we cannot just jump to the beginning of the
definition of **square** in our virtual machine, we instead use an instruction
(**RUN** in our interpreter, or **DOLIST** as it is sometimes known in most 
other implementations) to determine what to do with the following data, if there
is any. This system also allows us to encode primitives, or virtual machine
instructions, in the same way as we encode words. If our word does not have
the **RUN** instruction as its first instruction then the list of addresses will
not be interpreted but only a simple instruction will be executed.

The for loop and the switch statement here form the basis of our thread code
interpreter along with the program counter register (**pc**) and the instruction
pointer register (**I**).

To explain how execution proceeds it will help to refer to the internal
structure of a word and how words are compiled into the dictionary.

Above we saw that a words layout looked like this:

	.-----------.-----.------.----------------.
	| Word Name | PWD | CODE | Data Field ... |
	.-----------.-----.------.----------------.

And we can define words like this:

	: square dup * ;

Which, on a 32 bit machine, produces code that looks like this:

	Address        Contents 
	         ._____._____._____._____.
	  X      | 's' | 'q' | 'u' | 'a' |
	         ._____._____._____._____.
	  X+1    | 'r' | 'e' |  0  |  0  |
	         ._____._____._____._____.
	  X+2    | previous word pointer |
	         ._______________________.
	  X+3    |       CODE Field      |
	         ._______________________.
	  X+4    | Pointer to 'dup'      |
	         ._______________________.
	  X+5    | Pointer to '*'        |
	         ._______________________.
	  X+6    | Pointer to 'exit'     |
	         ._______________________.

The **:** word creates the header (everything up to and including the CODE
field), and enters compile mode, where instead of words being executed they
are compiled into the dictionary. When **dup** is encountered a pointer is
compiled into the next available slot at **X+4**, likewise for *****. The word
**;** is an immediate word that gets executed regardless of mode, which switches
back into compile mode and compiles a pointer to **exit**.

This **CODE** field at **X+3** contains the following:

	         .---------------.------------------.------------.-------------.
	Bit      |      15       | 14 ........... 8 |    9       | 7 ....... 0 |
	Field    | Compiling Bit |  Word Name Size  | Hidden Bit | Instruction |
	Contents |      1        |        2         |    0       |   RUN (1)   |
	         .---------------.------------------.------------.-------------.

The definition of words mostly consists of pointers to other words. The 
compiling bit, Word Name Size field and Hidden bit have no effect when
the word is execution, only in finding the word and determining whether to
execute it when typing the word in. The instruction tells the virtual machine
what to do with this word, in this case the instruction is **RUN**, which means
that the words contains a list of pointers to be executed. The virtual machine
then pushes the value of the next address to execute onto the return stack
and then jumps to that words CODE field, executing the instruction it finds
for that word.

Words like **dup** and ***** are built in words, they are slightly differently
in that their **CODE** field contains contains a virtual machine instruction 
other than **RUN**, they contain the instructions **DUP** and **MUL** 
respectively.