I'll try to explain the cycle better. Hopefully I'm not being repetitive :smile: 

There will potentially be hundreds of agents (i.e. player spacecraft/drones) running FORTH codes at the "same time.") 

Most of these "virtual machines" will be waiting for commands (such as fly from orbit a to orbit b) to complete and won't need much attention. 

However, the application will need to be running continuously in the background and cycling through each of the agents, asking whether the FORTH code needs to be cycled through an additional set of instructions. 

If the agent does have code that needs to be processed, your application will upload the agents virtual machine from the DB, churn through the FORTH binary, and then return the modified VM back to the DB before moving onto the next agent. 

It may also need to upload an output stream (STDOUT?) to the DB so that can later be reported back to the user. Most if not all of the fields you need to deal with will probably be located in the Agent DB table, although many of these fields don't exist yet. You'll need to add what you need.


--------------------------

For now, the game engine should pull the FORTH code from the database as soon as it finds it, execute the script in its entirety, and then delete the script before moving on to process the code for another agent. Of course the FORTH virtual machine (all the binary code that comprises a particular agent's memory) will persist in the DB even after the script which the player calls has been created, processed, and deleted.

In the future, some of the commands that a player or agent calls will not be instantaneous. For example, instructing the spacecraft to fly to another planet will take hours to complete and you don't want the game engine to sit around waiting for that to happen. I think the best way to solve this problem will be to link a command completion time to every item on FORTH's return stack. That way, the game engine will not cycle back to a program running on a particular agent until it sees that the time has been reached for the top-most item on the return stack. However, this will mean tinkering with libforth itself and is probably better left until we actually get the FORTH interpreter running.

--------------------------

Modifications to be done in table:

ALTER TABLE agents ADD vm MEDIUMBLOB NULL;
ALTER TABLE agents ADD input varchar(2048)  NULL;
ALTER TABLE agents ADD output varchar(2048)  NULL;


After modification we obtain the following table:


mysql> desc agents;
+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| name       | varchar(255)     | NO   |     | NULL    |                |
| company_id | int(10) unsigned | NO   | MUL | NULL    |                |
| coord_x    | double(8,2)      | NO   |     | NULL    |                |
| coord_y    | double(8,2)      | NO   |     | NULL    |                |
| coord_z    | double(8,2)      | NO   |     | NULL    |                |
| speed_x    | double(8,2)      | NO   |     | 0.00    |                |
| speed_y    | double(8,2)      | NO   |     | 0.00    |                |
| speed_z    | double(8,2)      | NO   |     | 0.00    |                |
| vm         | mediumblob       | YES  |     | NULL    |                |
| input      | varchar(2048)    | YES  |     | NULL    |                |
| output     | varchar(2048)    | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+
12 rows in set (0.01 sec)

--------------------------

Modifications done in DB to accomodate email fields:

ALTER TABLE commands ADD subject varchar(2048)  NULL;
ALTER TABLE agents ADD subject varchar(2048)  NULL;


--------------------------

Structure of the PHP code that deals with emails:

1) We receive emails here:

app/Http/Controllers/HomeController.php at function getMails()


2) We create an email object and we can then access all the properties of this email:

$mail = $mailbox->getMail($mailId);


3) With the email information we can store in DB the command information received. For this we create an agent and using the agent we 
   store in DB the command information.

   --------------------------------------------------
   Agent.php (depending on plain text or HTML format)
   --------------------------------------------------

   $agent->addCodeFromText($mail->textPlain);
  
   $agent->addCodeFromText(Html2Text\Html2Text::convert($mail->textHtml));


4) At Command.php we define the model to store commands in DB (new field is required here to accomodate the subject)

--------------------------

Modifications done in DB to accomodate email content:


mysql> desc commands;
+---------------+------------------+------+-----+---------+----------------+
| Field         | Type             | Null | Key | Default | Extra          |
+---------------+------------------+------+-----+---------+----------------+
| id            | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| code          | varchar(2048)    | NO   |     | NULL    |                |
| agent_id      | int(10) unsigned | NO   | MUL | NULL    |                |
| created_at    | timestamp        | YES  |     | NULL    |                |
| updated_at    | timestamp        | YES  |     | NULL    |                |
| subject       | varchar(2048)    | YES  |     | NULL    |                |
| email_content | longtext         | YES  |     | NULL    |                |
+---------------+------------------+------+-----+---------+----------------+
7 rows in set (0.00 sec)


mysql> alter table agents modify input longtext;
Query OK, 33 rows affected (0.10 sec)
Records: 33  Duplicates: 0  Warnings: 0

mysql> alter table agents modify output longtext;
Query OK, 33 rows affected (0.10 sec)
Records: 33  Duplicates: 0  Warnings: 0

mysql> desc agents;
+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| name       | varchar(255)     | NO   |     | NULL    |                |
| company_id | int(10) unsigned | NO   | MUL | NULL    |                |
| coord_x    | double(8,2)      | NO   |     | NULL    |                |
| coord_y    | double(8,2)      | NO   |     | NULL    |                |
| coord_z    | double(8,2)      | NO   |     | NULL    |                |
| speed_x    | double(8,2)      | NO   |     | 0.00    |                |
| speed_y    | double(8,2)      | NO   |     | 0.00    |                |
| speed_z    | double(8,2)      | NO   |     | 0.00    |                |
| vm         | mediumblob       | YES  |     | NULL    |                |
| input      | longtext         | YES  |     | NULL    |                |
| output     | longtext         | YES  |     | NULL    |                |
| subject    | varchar(2048)    | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+

--------------------------
